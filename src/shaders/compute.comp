#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
layout(set = 2, binding = 0) buffer Blades {
	Blade blades[];
};

// 2. Write out the culled blades
layout(set = 2, binding = 1) buffer CulledBlades {
	Blade culledBlades[];
};

// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
layout(set = 2, binding = 2) buffer NumBlades {
 	uint vertexCount;   // Write the number of blades remaining here
 	uint instanceCount; // = 1
 	uint firstVertex;   // = 0
 	uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		 numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads
    Blade blade = blades[gl_GlobalInvocationID.x];
    vec3 v0 = vec3(blade.v0);
    vec3 v1 = vec3(blade.v1);
    vec3 v2 = vec3(blade.v2);
    vec3 up = vec3(blade.up);

    float ori   = blade.v0.w;
    float h     =      blade.v1.w;
    float w     =       blade.v2.w;
    float stiff =   blade.up.w;

    vec3 t1 = vec3(sin(ori), 0, cos(ori));

    // apply forces

    // gravity
    vec4 D = vec4(0.0f, -1.0f, 0.0f, 9.8f);
    vec3 gE = normalize(D.xyz) * D.w;
    vec3 f = normalize(cross(t1, up));
    vec3 gF = 0.25f * length(gE) * f;
    vec3 g = gE + gF;

    // recovery
    vec3 iv2 = v0 + up * h;
    vec3 r = (iv2 - v2) * stiff;

    // wind
    vec3 wi = vec3(0.5 * sin(totalTime), 0.0f, 0.5 * sin(totalTime));
    float fd = 1.0f - abs(dot(normalize(wi), normalize(v2 - v0)));
    float fr = dot(v2 - v0, up) / h;
    float theta = fd * fr;
    vec3 wind = wi * theta;

    // total force
    vec3 tv2 = (g + r + w) * deltaTime;
    v2 += tv2;

    // position correction
    v2 -= up * min(dot(up, v2 - v0), 0.0f);
    float projHorizontal = length(v2 - v0 - up * dot(up, v2 - v0));
    v1 = v0 + up * h * max(1.0f - projHorizontal / h, 0.05f * max(projHorizontal / h, 1.0f));

    float L0 = length(v2 - v0);
    float L1 = length(v1 - v0) + length(v2 - v1);
    float L = (2.0f * L0 + L1) / 3.0f;

    float ratio = h / L;
    vec3 v1n = v0 + ratio * (v1 - v0);
    vec3 v2n = v1n + ratio * (v2 - v1);

    v1 = v1n;
    v2 = v2n;
    blade.v1 = vec4(v1, h);
    blade.v2 = vec4(v2, w);

    blades[gl_GlobalInvocationID.x] = blade;

    culledBlades[atomicAdd(numBlades.vertexCount, 1)] = blades[gl_GlobalInvocationID.x];
}
